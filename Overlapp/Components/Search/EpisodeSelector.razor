@namespace Overlapp.Components
@inject IQueryService QueryService;


@if (Data != null)
{
	<b>Season</b>
	for (int i = 1; i <= Data.number_of_seasons; i++)
	{
		int season = i;
		<button class="btn m-1 @(season == season_filter ? "btn-primary" : "btn-outline-primary")" @onclick="() => season_filter = season">@(season)</button>
	}

	<button class="btn btn-danger" @onclick="Reset">cancel</button>
	if (season_filter.HasValue)
	{
		<div>
			<b>Episode</b>
			@for(int i = 1; i <= Data.seasons[season_filter.Value - 1].episode_count; i++)
			{
				int episode = i;
				<button class="btn btn-outline-info m-1" @onclick="async () => await EpisodeSelected((Data, season_filter.Value, episode))">@episode</button>
			}
		</div>
	}
}
else if (IsBusy)
{
	<div class="spinner-grow"></div>
}
else
{
	<button class="btn btn-outline-dark mt-1" @onclick="GetDetails">Choose Episode</button>
}

@code {

	[Parameter]
	public int series_id { get; set; }

	[Parameter]
	public Func<int, Task<TvDetailsResponse>> FetchDetails { get; set; }

	[Parameter]
	public EventCallback<(IMediaRecord media, int season, int episode)> OnEpisodeSelected { get; set; }

	private async Task EpisodeSelected((IMediaRecord media, int season, int episode) selection)
	{
		await OnEpisodeSelected.InvokeAsync(selection);
		Reset();
	}
	private TvDetailsResponse? Data { get; set; }

	int? season_filter;

	protected override void OnInitialized()
	{

	}

	private bool IsBusy { get; set; }

	private void Reset()
	{
		season_filter = null;
		Data = null;

	}

	async Task GetDetails()
	{
		IsBusy = true;
		Data = await FetchDetails(series_id);
		IsBusy = false;
	}

	async Task<TvDetailsResponse> FetchSeriesDetails(int series_id)
	{
		return await QueryService.TvDetail(series_id);
	}

}
